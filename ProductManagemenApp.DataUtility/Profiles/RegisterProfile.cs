
/*
 * RegisterProfile : Automapping configuration.
 * File: RegisterProfile.cs
 * Author: Sam
 */

namespace ProductManagementApp.DataUtility
{
    using AutoMapper;
    using ProductManagementApp.Model;
    using System.Collections.ObjectModel;
    using System.Security.Cryptography;
    using System.Text;

    public class RegisterProfile : Profile
    {
        public RegisterProfile()
        {
            CreateMap<RegisterDTO, User>()
                .ForMember(dest => dest.Id, act => act.Ignore())
                .ForMember(dest => dest.Username, act => act.MapFrom(src => src.username))
                .ForMember(dest => dest.PasswordHash, act => act.Ignore())
                .ForMember(dest => dest.PasswordSalt, act => act.Ignore())
                .ForMember(dest => dest.FirstName, act => act.MapFrom(src => src.firstname))
                .ForMember(dest => dest.MiddleName, act => act.MapFrom(src => src.middlename))
                .ForMember(dest => dest.LastName, act => act.MapFrom(src => src.lastname))
                .ForMember(dest => dest.Role, act => act.Ignore())
                .ForMember(dest => dest.Phone, act => act.MapFrom(src => src.phone))
                .ForMember(dest => dest.Email, act => act.MapFrom(src => src.email))
                .ForMember(dest => dest.Address, act => act.MapFrom(src => src.address))
                .AfterMap((registerDto, user) =>
                {
                    // set to Unique Id and basic role.
                    user.Id = Guid.NewGuid();
                    user.Role = 1; // could be enum.

                    // Generate 
                    var data = AutoGeneratedData(registerDto);
                    
                    // fill 
                    user.PasswordHash = data["HASH"];
                    user.PasswordSalt = data["SALT"];
                });
        }

        private Dictionary<string, byte[]> AutoGeneratedData(RegisterDTO registerDTO)
        {
            // #TODO: consider using "Rfc2898DeriveBytes" for password security.



            // Generate hash and salt based on the password
            using var hmac = new HMACSHA512();
            byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(registerDTO.password));
            byte[] salt = hmac.Key;

            return new Dictionary<string, byte[]>()
            {
                // could use constants for keys.
                {"HASH", hash },
                {"SALT", salt}
            };
        }
    }
}
